{"version":3,"file":"LivePreview.min.js","sources":["../src/js/util.js","../src/js/LivePreview.js"],"sourcesContent":["import $ from \"jquery\";\nimport Craft from \"craft\";\n\n/**\n * Convert an array-like object to array.\n * @param {Array|Object} obj\n * @return {Array}\n */\nexport const toArray = obj => $.map(obj, x => [x]);\n\n/**\n * Store data in session storage.\n * @param {String} key\n * @param {*} data\n */\nexport const store = (key, data) =>\n  (window.sessionStorage[key] = JSON.stringify(data));\n\n/**\n * Retrieve data from session storage.\n * @param {String} key\n * @param {Object} fallback\n * @return {Object}\n */\nexport const retrieve = (key, fallback = {}) => {\n  try {\n    return $.extend({}, fallback, JSON.parse(window.sessionStorage[key]));\n  } catch (err) {\n    return fallback;\n  }\n};\n\n/**\n * Translation helper.\n * @param {String} msg\n * @return {String}\n */\nexport const t = msg => Craft.t(\"breakpoint\", msg);\n\n/**\n * Format a floating point number as a percentage.\n * @param {Number} num\n * @return {String}\n */\nexport const percent = num => Math.round(num * 100) + \"%\";\n\n/**\n * Create an option for a select input.\n * @param {String} label\n * @param {*} value\n * @return {$}\n */\nexport const option = (label, value = null) =>\n  $(\"<option>\")\n    .text(label)\n    .attr(\"value\", value);\n\n/**\n * Create a disabled divider option element.\n * @return {$}\n */\nexport const optionDivider = () => option(\"───\").attr(\"disabled\", true);\n","import $ from \"jquery\";\nimport Craft from \"craft\";\nimport Garnish from \"garnish\";\nimport {\n  toArray,\n  t,\n  percent,\n  option,\n  optionDivider,\n  store,\n  retrieve\n} from \"./util\";\n\n/**\n * BreakpointLivePreview plugin\n */\nconst BreakpointLivePreview = Garnish.Base.extend(\n  {\n    x: 0,\n    y: 0,\n    zoom: -1,\n    currentPreset: -1,\n\n    $root: null,\n    $trigger: null,\n    $viewport: null,\n\n    _enabled: false,\n    _livePreview: null,\n\n    init(settings) {\n      this.setSettings(settings, BreakpointLivePreview.defaults);\n\n      Garnish.on(Craft.LivePreview, \"enter\", e => this.attach(e.target));\n    },\n\n    /**\n     * Attach plugin to live preview instance.\n     * @param {Craft.LivePreview} livePreview\n     * @return {Boolean}\n     */\n    attach(livePreview) {\n      // Make sure we attach only once per instance.\n      if (this._livePreview) return false;\n      this._livePreview = livePreview;\n\n      // Render UI once.\n      if (!this.$root) this._render();\n\n      // Insert root container and move lp iframe into our viewport.\n      livePreview.$iframeContainer.append(this.$root);\n      livePreview.$iframe.appendTo(this.$viewport);\n\n      // Append trigger button to editor.\n      this.$trigger = $('<button class=\"btn bp-lp-trigger\"/>')\n        .attr(\"title\", t(\"Toggle screen sizes\"))\n        .on(\"click\", () => this.toggle())\n        .insertAfter(livePreview.$editor.find(\".header .btn\").first());\n\n      this.retrieve();\n      this.update();\n\n      // Make sure dimensions stay up-to-date.\n      $(window).on(\"resize\", e => this.update());\n\n      return true;\n    },\n\n    /**\n     * Toggle the preview.\n     */\n    toggle() {\n      return this._enabled ? this.disable() : this.enable();\n    },\n\n    /**\n     * Enable the preview.\n     */\n    enable() {\n      this.$trigger.addClass(\"active\");\n      this.$root.addClass(\"bp-lp-active\");\n      this._enabled = true;\n      this.update();\n    },\n\n    /**\n     * Disable the preview.\n     */\n    disable() {\n      this.$trigger.removeClass(\"active\");\n      this.$root.removeClass(\"bp-lp-active\");\n      this._enabled = false;\n      this.update();\n    },\n\n    /**\n     * Set viewport dimensions.\n     * @param {Number} x\n     * @param {Number} y\n     */\n    setSize(x, y) {\n      this.x = parseInt(x);\n      this.y = parseInt(y);\n      this.update();\n    },\n\n    /**\n     * Set a zoom level.\n     * @param {Number} level\n     */\n    setZoom(level) {\n      this.zoom = parseFloat(level);\n      this.update();\n    },\n\n    /**\n     * Set a preset by index.\n     * @param {Number} index\n     */\n    setPreset(index) {\n      const p = this.presets[index] || [null, 0, 0];\n      this.currentPreset = index;\n      this.setSize(p[1], p[2]);\n      this.store();\n    },\n\n    /**\n     * Rotate viewport.\n     * @return {void}\n     */\n    rotate() {\n      this.setSize(this.viewportSize.y, this.viewportSize.x);\n    },\n\n    /**\n     * Update state.\n     * @return {void}\n     */\n    update() {\n      this.$viewport.css({\n        width: this.isEnabled ? this.x || \"100%\" : \"\",\n        height: this.isEnabled ? this.y || \"100%\" : \"\",\n        transform:\n          this.isEnabled && this.scale !== 1 ? `scale(${this.scale})` : \"\"\n      });\n\n      this.updateSizeInput(\"x\");\n      this.updateSizeInput(\"y\");\n\n      this.$zoom\n        .find(\"option\")\n        .first()\n        .text(t(\"Fit\") + \" (\" + percent(this.fitScale) + \")\");\n\n      this.$presets\n        .find(\"option\")\n        .attr(\"selected\", false)\n        .filter(`[value=\"${this.currentPreset}\"]`)\n        .attr(\"selected\", true);\n    },\n\n    store() {\n      store(\"Breakpoint.LivePreview.state\", {\n        currentPreset: this.currentPreset\n      });\n    },\n\n    retrieve() {\n      const state = retrieve(\"Breakpoint.LivePreview.state\", {\n        currentPreset: -1\n      });\n\n      this.setPreset(state.currentPreset);\n    },\n\n    /**\n     * Update state of a size input.\n     * @param {String} param\n     * @return {$}\n     */\n    updateSizeInput(param) {\n      $(this[\"$\" + param])\n        .val(this[param] || this.viewportSize[param])\n        .attr(\"disabled\", this.hasPreset);\n    },\n\n    /**\n     * Check if plugin is enabled.\n     * @return {Boolean}\n     */\n    get isEnabled() {\n      return !!this._enabled;\n    },\n\n    /**\n     * Get list of presets.\n     * @return {Array}\n     */\n    get presets() {\n      return toArray(this.settings.presets);\n    },\n\n    /**\n     * Get list of zoom levels.\n     * @return {Array}\n     */\n    get zoomLevels() {\n      return toArray(this.settings.zoomLevels);\n    },\n\n    /**\n     * Get viewport size.\n     * @return {Object}\n     */\n    get viewportSize() {\n      return { x: this.$viewport.width(), y: this.$viewport.height() };\n    },\n\n    /**\n     * Get actual viewport scale.\n     * @return {Number}\n     */\n    get scale() {\n      return this.zoom > 0 ? this.zoom : this.fitScale;\n    },\n\n    /**\n     * Get calculated scale fitting the viewport.\n     * @return {Number}\n     */\n    get fitScale() {\n      return Math.min(\n        1.0,\n        this.$stage.width() / this.x,\n        this.$stage.height() / this.y\n      );\n    },\n\n    /**\n     * Check if current screen size is square.\n     * @return {Boolean}\n     */\n    get isSquare() {\n      return this.x === this.y;\n    },\n\n    /**\n     * Check if a valid preset is selected.\n     * @return {Boolean}\n     */\n    get hasPreset() {\n      return this.currentPreset !== -1;\n    },\n\n    /**\n     * Preset option elements.\n     * @return {Array}\n     */\n    get presetOptions() {\n      return this.presets.map(\n        (p, i) => (p[0] === \"---\" ? optionDivider() : option(p[0], i))\n      );\n    },\n\n    /**\n     * Zoom level option elements.\n     * @return {Array}\n     */\n    get zoomLevelOptions() {\n      return this.zoomLevels.map(val => option(percent(val), val));\n    },\n\n    /**\n     * Render the plugin's dom.\n     */\n    _render() {\n      // Scaffolding\n      const $root = $('<div class=\"bp-lp-root\"/>');\n      const $toolbar = $('<div class=\"bp-lp-toolbar\"/>').appendTo($root);\n      const $stage = $('<div class=\"bp-lp-stage\"/>').appendTo($root);\n      const $viewport = $('<div class=\"bp-lp-viewport\"/>').appendTo($stage);\n\n      const $presets = $('<select class=\"bp-lp-presets\"/>')\n        .attr(\"title\", t(\"Presets\"))\n        .on(\"change\", e => this.setPreset(parseInt(e.target.value)))\n        .appendTo($toolbar)\n        .append(option(t(\"Responsive\"), -1))\n        .append(optionDivider())\n        .append(this.presetOptions);\n\n      const $x = this._makeSizeInput(\"x\", t(\"Width\")).appendTo($toolbar);\n\n      const $divider = $(\"<small>\")\n        .text(\"×\")\n        .appendTo($toolbar);\n\n      const $y = this._makeSizeInput(\"y\", t(\"Height\")).appendTo($toolbar);\n\n      const $zoom = $('<select class=\"bp-lp-zoom\"/>')\n        .attr(\"title\", t(\"Zoom\"))\n        .on(\"change\", e => this.setZoom(parseFloat(e.target.value)))\n        .appendTo($toolbar)\n        .append(option(t(\"Zoom\"), -1))\n        .append(optionDivider())\n        .append(this.zoomLevelOptions);\n\n      const $rotate = $('<button class=\"bp-lp-rotate\"/>')\n        .attr(\"title\", t(\"Rotate\"))\n        //.attr(\"disabled\", true)\n        .on(\"click\", e => this.rotate())\n        .appendTo($toolbar);\n\n      this.$root = $root;\n      this.$viewport = $viewport;\n      this.$stage = $stage;\n      this.$zoom = $zoom;\n      this.$presets = $presets;\n      this.$rotate = $rotate;\n      this.$x = $x;\n      this.$y = $y;\n    },\n\n    /**\n     * Create a screen size input.\n     * @param {String} param Screen dimension, 'x' or 'y'..\n     * @param {String} title Input title attribute.\n     * @return {$}\n     */\n    _makeSizeInput(param, title) {\n      return $(\"<input/>\")\n        .addClass(\"bp-lp-size-\" + param)\n        .attr({\n          title,\n          disabled: true,\n          maxlength: 4\n        })\n        .val(0)\n        .on(\"focus\", e => e.target.select())\n        .on(\"mouseup\", e => e.preventDefault())\n        .on(\"change\", e => {\n          this[param] = Math.abs(parseInt(e.target.value));\n          this.update();\n        })\n        .on(\"keydown\", e => {\n          if (e.keyCode !== Garnish.UP_KEY && e.keyCode !== Garnish.DOWN_KEY)\n            return;\n          const step = e.shiftKey ? 10 : 1;\n          const mod = e.keyCode === Garnish.UP_KEY ? 1 : -1;\n          this[param] = this.viewportSize[param] + step * mod;\n          this.update();\n          e.preventDefault();\n        });\n    }\n  },\n  {\n    defaults: {\n      presets: [],\n      zoomLevels: []\n    }\n  }\n);\n\nexport default BreakpointLivePreview;\n"],"names":["toArray","obj","$","map","x","t","msg","Craft","percent","num","Math","round","option","label","value","text","attr","optionDivider","BreakpointLivePreview","Garnish","Base","extend","y","zoom","currentPreset","$root","$trigger","$viewport","_enabled","_livePreview","init","settings","setSettings","defaults","on","LivePreview","e","_this","attach","target","livePreview","this","_render","$iframeContainer","append","$iframe","appendTo","_this2","toggle","insertAfter","$editor","find","first","retrieve","update","window","disable","enable","addClass","removeClass","setSize","parseInt","setZoom","level","parseFloat","setPreset","index","p","presets","store","rotate","viewportSize","css","width","isEnabled","height","transform","scale","updateSizeInput","$zoom","fitScale","$presets","filter","key","data","sessionStorage","JSON","stringify","state","fallback","parse","err","param","val","hasPreset","zoomLevels","min","$stage","i","$toolbar","_this3","presetOptions","$x","_makeSizeInput","$y","zoomLevelOptions","$rotate","title","disabled","maxlength","select","preventDefault","_this4","abs","keyCode","UP_KEY","DOWN_KEY","step","shiftKey","mod"],"mappings":"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"}